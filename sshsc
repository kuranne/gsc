#!/bin/zsh

nowDir="$(cd -- "$(dirname -- "${(%):-%x}")" && pwd)"
hereDir="$(pwd)"

#--- Import ---#
for COREUTIL in "$nowDir/kurannelib/"core.*.sh; do
    source "$COREUTIL" || { echo "\033[0;31mERROR:\033[0m Can't load $COREUTIL"; exit 1 ; }
done
for PATHforSSH in "$nowDir/kurannelib/ssh/"ssh.*.sh; do
    source "$PATHforSSH" || { echo "\033[0;31mERROR:\033[0m Can't load $PATHforSSH"; exit 1 ; }
done

#--- gsc.config ---#
[[ -f "${nowDir}/kurannelib/gsc.config" ]] || { echo "\033[0;31mERROR:\033[0m not found gsc.config in $nowDir/kurannelib"; exit 1 ; }
if [ -f "${hereDir}/.gsc.config" ]; then
    source "${hereDir}/.gsc.config"
elif [ -f "${nowDir}/kurannelib/gsc.config" ]; then
    cp "${nowDir}/kurannelib/gsc.config" "${hereDir}/.gsc.config" || errorExit
    source "${hereDir}/.gsc.config"
else
    echo "\033[0;31mError:\033[0m Can't load gsc.config" || errorExit
fi

#--- Origin Variable ---#
removeSsh=0
createSsh=0
selectedAccounts=()

#--- Loop for options ---#
while getopts "rC" opt; do
    case $opt in
        r) removeSsh=1 ;;
        C) createSsh=1 ;;
        \?) echo "$USAGE ssc [-r|-C] [accountName...]" >&2; errorExit ;;
    esac
done

shift $((OPTIND - 1)) #shift - out

#--- Loop for Argrument ---#
for arg in "$@"; do
    if [[ -n "${gitAccounts[$arg]}" ]]; then
        selectedAccounts+=("$arg")
    else
        echo "$WARNING ${arg} is not a valid account!" >&2
    fi
done

#--- Start ---#
[[ $removeSsh -eq 1 ]] && removeSshKey
[[ $createSsh -eq 1 ]] && createSshKey
addtoSSHAgent
gscClear
exit 0